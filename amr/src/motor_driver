#! /usr/bin/env python3
# ROS imports
import rospy
import tf
from geometry_msgs.msg import Twist,Point,Pose,Quaternion,Vector3
from std_msgs.msg import Int32,Float32,Bool
from amr.msg import wheel
from nav_msgs.msg import Odometry

import controller

# Other imports
from math import pi,cos,sin
import odrive
from odrive.enums import *
import time
import sys

# Arguments from roslaunch
max_speed   = 5  #m/s
time_out    = 1  #s  
left_gain   = [5.1,1.75,0.01750] 
right_gain  = [6.2,1.35,0.01425]

class Motor_Driver:
    def __init__(self):
        self.linearVelocity  = 0
        self.angularVelocity = 0
        self.left_speed  = 0
        self.right_speed = 0 
        self.x = 0
        self.y = 0
        self.theta = 0

        self.left_wheel = wheel()
        self.left_wheel.header.frame_id = "Left Wheel"
        self.left_wheel.header.seq = 0

        self.right_wheel = wheel()
        self.right_wheel.header.frame_id= "Right Wheel"
        self.right_wheel.header.seq = 0

        self.odom_msg = Odometry()
        self.odom_msg.header.frame_id = "cmodom" 
        self.odom_msg.header.seq = 0

        self.left_wheel_pub = rospy.Publisher("Left_Wheel",wheel,queue_size=1)
        self.right_wheel_pub= rospy.Publisher("Right_Wheel",wheel,queue_size=1)
        self.odom_pub       = rospy.Publisher("Odometery",Odometry,queue_size=1)
        self.odom_tf_pub    = tf.TransformBroadcaster()

        # Wait until board is detected
        odrive_board = odrive.find_any()

        rospy.init_node('Motor_Driver')
        rospy.loginfo("************************")
        rospy.loginfo("Odrive board connected and node started")
        rospy.loginfo("************************")
        # rospy.on_shutdown(self.Stop_Motor())
        Odrive_state_pub = rospy.Publisher("Odrive_state",Int32,queue_size=1)
        Odrive_state_pub.publish(1)

        self.a0 = odrive_board.axis0
        self.a1 = odrive_board.axis1

        self.a0.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL
        self.a1.requested_state = AXIS_STATE_CLOSED_LOOP_CONTROL

    def setup(self,maxMspeed):

        self.wheelSeparation = 0.48        #distance between wheel centers(m)
        self.wheelDiameter   = 166e-3      #m
        self.ticks_rev       = 90          #encoder ticks per revolution
        dist_per_rev         = pi*self.wheelDiameter
        self.rev_per_m       = 1/dist_per_rev  #1/pi*d
        self.twist_per_rev   = 2*dist_per_rev/self.wheelSeparation #theta(rad) = s/r (sector arc)
        self.maxMotorSpeed   = maxMspeed*self.rev_per_m   #rev/s 

        limits = [-self.maxMotorSpeed,self.maxMotorSpeed]
        # Safety timeouts
        self.timeout = time_out #s

        # cmd_vel subscriber
        rospy.Subscriber("cmd_vel",Twist,self.cmd_vel_CB)

        rate = rospy.Rate(50)
        self.last_vel_time = rospy.get_time()

        self.left_controller = controller.PID_controller_wheel("Left_wheel",limits,left_gain)
        self.right_controller = controller.PID_controller_wheel("Right_wheel",limits,right_gain)

        while not rospy.is_shutdown():
            self.FreeRun()
            rate.sleep()

    def cmd_vel_CB(self,twist):
        self.linearVelocity = twist.linear.x*self.rev_per_m
        self.angularVelocity= twist.angular.z/self.twist_per_rev
        self.last_vel_time = rospy.get_time()
        

    def runMotor(self,linear,angular):

        self.left_speed = -(linear+angular*0.5*self.wheelSeparation)
        self.right_speed=  (linear-angular*0.5*self.wheelSeparation)

        encoder_time = rospy.get_time()

        dt = encoder_time - self.last_vel_time

        if dt > 1: dt = 0.1

        left_effort = self.left_controller.effort(self.left_speed,self.a0.encoder.vel_estimate,dt)
        right_effort= self.right_controller.effort(self.right_speed,self.a1.encoder.vel_estimate,dt)

        self.a0.controller.input_vel = self.left_speed + left_effort
        self.a1.controller.input_vel = self.right_speed+ right_effort


        self.left_wheel.header.stamp   = rospy.get_rostime()
        self.left_wheel.header.seq    += 1
        self.left_wheel.setpoint_speed = self.left_speed
        self.left_wheel.encoder_speed  = self.a0.encoder.vel_estimate
        self.left_wheel.PID_speed      = self.left_speed + left_effort
        self.left_wheel.dt             = dt  
        self.left_wheel_pub.publish(self.left_wheel)


        self.right_wheel.header.stamp = rospy.get_rostime()
        self.right_wheel.header.seq    += 1
        self.right_wheel.setpoint_speed = self.right_speed
        self.right_wheel.encoder_speed  = self.a1.encoder.vel_estimate
        self.right_wheel.PID_speed      = self.right_speed + right_effort
        self.right_wheel.dt             = dt  
        self.right_wheel_pub.publish(self.right_wheel)  

        self.odom()    

    def odom(self):
        V_L = -self.left_wheel.PID_speed/self.rev_per_m
        V_R = self.right_wheel.PID_speed/self.rev_per_m
        dt  = (self.left_wheel.dt + self.right_wheel.dt)*0.5

        V         = 0.5*(V_R+V_L)
        omega_dot = (V_L-V_R)/self.wheelSeparation
 
        self.theta +=  omega_dot*dt
        if self.theta > 2*pi  : self.theta = self.theta - 2*pi
        if self.theta < -2*pi : self.theta = self.theta + 2*pi 

        vx = V*cos(self.theta)
        vy = V*sin(self.theta)

        self.x += dt*(vx*cos(self.theta)-vy*sin(self.theta))
        self.y += -dt*(vx*sin(self.theta)+vy*cos(self.theta))
        
        quat = tf.transformations.quaternion_from_euler(0,0,self.theta)

        self.odom_tf_pub.sendTransform((self.x,self.y,0),quat,rospy.get_rostime(),"Body","odom")

        self.odom_msg.header.stamp = rospy.get_rostime()
        self.odom_msg.pose.pose = Pose(Point(self.x,self.y,0),Quaternion(*quat))
        self.odom_msg.child_frame_id = "Body"
        self.odom_msg.twist.twist = Twist(Vector3(vx,vy,0),Vector3(0,0,omega_dot))

        self.odom_pub.publish(self.odom_msg)
        # print("Theta = %.3f"%self.theta)

        # print(self.x,self.y,d_theta)

    def Stop_Motor(self):
        self.runMotor(0,0)


    def Run(self):
        # Check for time out
        if rospy.get_time() - self.last_vel_time < self.timeout:
            self.runMotor(self.linearVelocity,self.angularVelocity)
        else:
            self.Stop_Motor()

    def FreeRun(self):
        self.a0.requested_state = AXIS_STATE_IDLE
        self.a1.requested_state = AXIS_STATE_IDLE
        left_wheel_encoder_hist = 0 
        right_wheel_encoder_hist= 0
        t_hist = rospy.get_time()
        x = 0
        y = 0
        theta = 0 
        while True:
            try:
                left_wheel_encoder = self.a0.encoder.vel_estimate
                right_wheel_encoder= self.a1.encoder.vel_estimate

                if (left_wheel_encoder != left_wheel_encoder_hist) or (right_wheel_encoder != right_wheel_encoder_hist):
                    dt = rospy.get_time() - t_hist
                    t_hist = rospy.get_time()
                    V_L = -left_wheel_encoder/self.rev_per_m
                    V_R = right_wheel_encoder/self.rev_per_m
            
                    V         = 0.5*(V_R+V_L)
                    omega_dot = (V_L-V_R)/self.wheelSeparation
                    theta += omega_dot*dt
                    if theta > 2*pi : theta = theta - 2*pi
                    if theta < -2*pi : theta = theta + 2*pi 

                    vx = V*cos(theta)
                    vy = V*sin(theta)

                    x += dt*(vx*cos(theta)-vy*sin(theta))
                    y += -dt*(vx*sin(theta)+vy*cos(theta))
            
                    quat = tf.transformations.quaternion_from_euler(0,0,theta)

                    self.odom_tf_pub.sendTransform((x,y,0),quat,rospy.get_rostime(),"Body","Odom")

                    self.odom_msg.header.stamp = rospy.get_rostime()
                    self.odom_msg.pose.pose = Pose(Point(x,y,0),Quaternion(*quat))
                    self.odom_msg.child_frame_id = "Body"
                    self.odom_msg.twist.twist = Twist(Vector3(vx,vy,0),Vector3(0,0,omega_dot))

                    self.odom_pub.publish(self.odom_msg)

                    left_wheel_encoder_hist = left_wheel_encoder
                    right_wheel_encoder_hist = right_wheel_encoder
            except KeyboardInterrupt:
                break

if __name__ == '__main__':
    try:
        driving_node = Motor_Driver()
        driving_node.setup(max_speed)
    
    except rospy.ROSInterruptException:
        driving_node.Stop_Motor()

    except KeyboardInterrupt:
        quit()
        