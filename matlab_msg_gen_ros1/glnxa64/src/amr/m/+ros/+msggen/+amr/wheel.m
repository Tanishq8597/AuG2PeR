
classdef wheel < ros.Message
    %wheel MATLAB implementation of amr/wheel
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'amr/wheel' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '7c16d9d03816d0fd55bb4097f7cbdbc9' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'SetpointSpeed' 'EncoderSpeed' 'PIDSpeed' 'Dt' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'setpoint_speed' 'encoder_speed' 'PID_speed' 'dt' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        SetpointSpeed
        EncoderSpeed
        PIDSpeed
        Dt
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'wheel', 'Header')
            obj.Header = val;
        end
        function set.SetpointSpeed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'wheel', 'SetpointSpeed');
            obj.SetpointSpeed = double(val);
        end
        function set.EncoderSpeed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'wheel', 'EncoderSpeed');
            obj.EncoderSpeed = double(val);
        end
        function set.PIDSpeed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'wheel', 'PIDSpeed');
            obj.PIDSpeed = double(val);
        end
        function set.Dt(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'wheel', 'Dt');
            obj.Dt = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.amr.wheel.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.amr.wheel;
            obj.reload(strObj);
        end
    end
end
